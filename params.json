{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"C++ header file for easy creation of MATLAB mex files.","body":"# mexWrapper\r\n\r\nmexWrapper is a C++ header file containing class definitions to help you \r\naccess MATLAB matrices in C++. They are also useful to link existing C/C++ \r\nand Fortran code to MATLAB.\r\n\r\n### Objects\r\n\r\nThere are two main objects that we can use:\r\n\r\n1. `array`\r\n2. `cell`\r\n\r\nAn `array` is a template class that depends on `mxType` and the dimension of the\r\n`array`. There are six possible values for the `mxType`:\r\n\r\n- `IN` - Access matrices from MATLAB.\r\n- `PR` - If you create a matrix using a regular `mxArray` and you \r\n         want to use the functions provided by `array` then use this type.\r\n- `OUT` - Set matrices in MATLAB.\r\n- `CPP` - Create an `array` using memory managed by C++.\r\n- `ML` - Create an `array` using MATLAB's memory manager.\r\n- `CELL` - DO NOT use this. A `cell` is an array of pointers that point to \r\n           `array`s of this type.\r\n\r\n### Inheritance\r\n\r\nAll `array`s are derived from a base template class `mxBase`. This base class \r\ncontains function definitions to access the `array` information.\r\n\r\nIf you ever want to pass an `array` to a function I suggest you declare \r\nthe function as follows:\r\n\r\n    void function(mxBase<n>& m);\r\n\r\ninstead of, say\r\n\r\n    void function(array<IN, n>& m);\r\n\r\nThe first declaration allows you to pass any `array`, this includes the \r\narrays contained in a `cell`. The second one is more specific, it only\r\ntakes an array of type `IN`. Notice however that the dimension is important.\r\n\r\n### Array Indexing\r\n\r\nThe index of an `array` starts at 1 as in MATLAB and fortran. To access\r\nan element of an `array` as if was a 1-dimensional `array` you can use the\r\n`[]` operator. If `n` is the dimension of the array then you can access a \r\nparticular index through the use of the `()` operator. If `n == 2` then the\r\n`()` operator takes in 2 integers. If `n == 3` it takes 3 integers. \r\nIf `n > 3` then `()` takes a C/C++ array with `n` integers specifying the index. \r\n\r\n### Array Size\r\n\r\nYou can access the size of the array by using the `size` function. If no \r\nparameter is given it will return a pointer to the first integer \r\nspecifying the size of the first dimension. Otherwise, `size` will \r\ntake a positive integer (careful, we do not check if this value is valid).\r\n\r\nTo change the size you can use the function `setSize`. If the dimension \r\nis less than 3 then you can use the template function \r\n\r\n    setSize(array, d1, d2, mxComplexity) \r\n\r\n*WARNING*: `setSize` deletes the contents of the array and allocates \r\nnew memory. When declaring an array of type `ML`, or `OUT` then all elements \r\nare initialized to zero when setting the size of the `array`. If you \r\nuse `CPP` then the elements are not initialized.\r\n","name":"mexWrapper","google":""}